{"version":3,"sources":["webpack:///./src/routes/Settings/containers/SettingsContainer.js","webpack:///./src/routes/Settings/modules/settings.js","webpack:///./src/routes/Settings/components/Settings.js"],"names":["mapDispatchToProps","increment","doubleAsync","mapStateToProps","state","counter","counterReducer","COUNTER_INCREMENT","value","type","payload","dispatch","getState","resolve","setTimeout","actions","ACTION_HANDLERS","action","initialState","handler","Settings","props","margin","settings","propTypes","PropTypes","number","isRequired","func"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,KAAMA,qBAAqB;AACzBC,cAAY;AAAA,YAAM,yBAAU,CAAV,CAAN;AAAA,IADa;AAEzBC;AAFyB,EAA3B;;AAKA,KAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD;AAAA,UAAY;AAClCC,cAAUD,MAAMC;AADkB,IAAZ;AAAA,EAAxB;;mBAIe,yBAAQF,eAAR,EAAyBH,kBAAzB,qB;;;;;;;;;;;;;;;;;;;;;;SCLCC,S,GAAAA,S;mBA0CQK,c;;;;AAlDxB;AACA;AACA;AACO,KAAMC,gDAAoB,mBAA1B;;AAEP;AACA;AACA;AACO,UAASN,SAAT,GAA+B;AAAA,OAAXO,KAAW,uEAAH,CAAG;;AACpC,UAAO;AACLC,WAAUF,iBADL;AAELG,cAAUF;AAFL,IAAP;AAID;;AAED;;;;;;;;AAQO,KAAMN,oCAAc,SAAdA,WAAc,GAAM;AAC/B,UAAO,UAACS,QAAD,EAAWC,QAAX,EAAwB;AAC7B,YAAO,sBAAY,UAACC,OAAD,EAAa;AAC9BC,kBAAW,YAAM;AACfH,kBAASV,UAAUW,WAAWP,OAArB,CAAT;AACAQ;AACD,QAHD,EAGG,GAHH;AAID,MALM,CAAP;AAMD,IAPD;AAQD,EATM;;AAWA,KAAME,4BAAU;AACrBd,uBADqB;AAErBC;AAFqB,EAAhB;;AAKP;AACA;AACA;AACA,KAAMc,oDACHT,iBADG,EACkB,UAACH,KAAD,EAAQa,MAAR;AAAA,UAAmBb,QAAQa,OAAOP,OAAlC;AAAA,EADlB,CAAN;;AAIA;AACA;AACA;AACA,KAAMQ,eAAe,CAArB;AACe,UAASZ,cAAT,GAAuD;AAAA,OAA9BF,KAA8B,uEAAtBc,YAAsB;AAAA,OAARD,MAAQ;;AACpE,OAAME,UAAUH,gBAAgBC,OAAOR,IAAvB,CAAhB;;AAEA,UAAOU,UAAUA,QAAQf,KAAR,EAAea,MAAf,CAAV,GAAmCb,KAA1C;AACD,E;;;;;;;;;;;;;;ACtDD;;;;;;AAEO,KAAMgB,8BAAW,SAAXA,QAAW,CAACC,KAAD;AAAA,UACtB;AAAA;AAAA,OAAK,OAAO,EAAEC,QAAQ,QAAV,EAAZ;AACE;AAAA;AAAA;AAAA;AAAeD,aAAME;AAArB,MADF;AAEE;AAAA;AAAA,SAAQ,WAAU,iBAAlB,EAAoC,SAASF,MAAMpB,SAAnD;AAAA;AAAA,MAFF;AAKG,QALH;AAME;AAAA;AAAA,SAAQ,WAAU,iBAAlB,EAAoC,SAASoB,MAAMnB,WAAnD;AAAA;AAAA;AANF,IADsB;AAAA,EAAjB;;AAaPkB,UAASI,SAAT,GAAqB;AACnBD,aAAe,gBAAME,SAAN,CAAgBC,MAAhB,CAAuBC,UADnB;AAEnBzB,gBAAc,gBAAMuB,SAAN,CAAgBG,IAAhB,CAAqBD,UAFhB;AAGnB1B,cAAc,gBAAMwB,SAAN,CAAgBG,IAAhB,CAAqBD;AAHhB,EAArB;;mBAMeP,Q","file":"3.settings.0a69b9afafa3344f04f9.js","sourcesContent":["import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/settings'\nimport Settings from '../components/Settings'\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync\n}\n\nconst mapStateToProps = (state) => ({\n  counter : state.counter\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Settings/containers/SettingsContainer.js","// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk!\n\n    NOTE: This is solely for demonstration purposes. In a real application,\n    you'd probably want to dispatch an action of COUNTER_DOUBLE and let the\n    reducer take care of this logic.  */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch(increment(getState().counter))\n        resolve()\n      }, 200)\n    })\n  }\n}\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT] : (state, action) => state + action.payload\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Settings/modules/settings.js","import React from 'react'\n\nexport const Settings = (props) => (\n  <div style={{ margin: '0 auto' }} >\n    <h2>Settings: {props.settings}</h2>\n    <button className=\"btn btn-default\" onClick={props.increment}>\n      Increment\n    </button>\n    {' '}\n    <button className=\"btn btn-default\" onClick={props.doubleAsync}>\n      Double (Async)\n    </button>\n  </div>\n)\n\nSettings.propTypes = {\n  settings     : React.PropTypes.number.isRequired,\n  doubleAsync : React.PropTypes.func.isRequired,\n  increment   : React.PropTypes.func.isRequired\n}\n\nexport default Settings\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Settings/components/Settings.js"],"sourceRoot":""}